environment:
    PGUSER: postgres
    PGPASSWORD: Password12!

matrix:
    fast_finish: false

services:
    # Note: if you change this service also change the paths to match
    # (see where Program Files\Postgres\9.6 is used)
    - postgresql96

cache:
  # Rebuild cache if following file changes
  # (See the file to zap the cache manually)
  - C:\Others -> scripts\appveyor.cache_rebuild

# Repository gets cloned, Cache is restored
install:
    # We start off CD'ed to cloned folder
    - SET BASE_DIR=C:\Others
    - SET BUILD_DIR=%BASE_DIR%\Builds
    - IF NOT EXIST %BUILD_DIR% MKDIR %BUILD_DIR%

    - ECHO *******************************************************************
    - ECHO Initialized variables specific for this build
    - ECHO *******************************************************************
    - ECHO %BASE_DIR%
    - ECHO %BUILD_DIR%
    - ECHO *******************************************************************

    # Setup directories for building OpenSSL libraries
    - ECHO *******************************************************************
    - ECHO Preparing for building OpenSSL
    - ECHO *******************************************************************
    - SET OPENSSLTOP=%BASE_DIR%\openssl
    - IF NOT EXIST %OPENSSLTOP%\include\openssl MKDIR %OPENSSLTOP%\include\openssl
    - IF NOT EXIST %OPENSSLTOP%\lib MKDIR %OPENSSLTOP%\lib

    # Download OpenSSL source
    - CD C:\Others
    - IF NOT EXIST OpenSSL_%OPENSSL_VERSION%.zip (
        curl -fsSL -o OpenSSL_%OPENSSL_VERSION%.zip https://github.com/openssl/openssl/archive/OpenSSL_%OPENSSL_VERSION%.zip
      )

    # To use OpenSSL >= 1.1.0, both libpq and psycopg build environments have
    #   to support the new library names.  Below are commands to build OpenSSL
    #   1.1.0:
    #    - mkdir _build
    #    - cd _build
    #    - perl ..\Configure %TARGET% no-asm no-shared --prefix=%BASE_DIR%\openssl --openssldir=%BASE_DIR%\openssl
    #    - nmake build_libs install_dev
    - IF NOT EXIST %OPENSSLTOP%\lib\ssleay32.lib (
        CD %BUILD_DIR% &&
        7z x C:\Others\OpenSSL_%OPENSSL_VERSION%.zip &&
        CD openssl-OpenSSL_%OPENSSL_VERSION% &&
        perl Configure %TARGET% no-asm no-shared no-zlib --prefix=%OPENSSLTOP% --openssldir=%OPENSSLTOP% &&
        CALL ms\%DO% &&
        nmake -f ms\nt.mak init headers lib &&
        COPY inc32\openssl\*.h %OPENSSLTOP%\include\openssl &&
        COPY out32\*.lib %OPENSSLTOP%\lib &&
        CD %BASE_DIR% &&
        RMDIR /S /Q %BUILD_DIR%\openssl-OpenSSL_%OPENSSL_VERSION%
      )

    # Setup directories for building PostgreSQL librarires
    - ECHO *******************************************************************
    - ECHO Preparing for building PostgreSQL libraries
    - ECHO *******************************************************************
    - SET PGTOP=%BASE_DIR%\postgresql
    - IF NOT EXIST %PGTOP%\include MKDIR %PGTOP%\include
    - IF NOT EXIST %PGTOP%\lib MKDIR %PGTOP%\lib
    - IF NOT EXIST %PGTOP%\bin MKDIR %PGTOP%\bin

    # Download PostgreSQL source
    - CD C:\Others
    - IF NOT EXIST postgres-REL_%POSTGRES_VERSION%.zip (
        curl -fsSL -o postgres-REL_%POSTGRES_VERSION%.zip https://github.com/postgres/postgres/archive/REL_%POSTGRES_VERSION%.zip
      )

    # Setup build config file (config.pl)
    # Hack the Mkvcbuild.pm file so we build the lib version of libpq
    # Build libpgport, libpgcommon, libpq
    # Install includes
    # Copy over built libraries
    # Prepare local include directory for building from
    # Build pg_config in place
    # NOTE: Cannot set and use the same variable inside an IF
    - SET PGBUILD=%BUILD_DIR%\postgres-REL_%POSTGRES_VERSION%
    - IF NOT EXIST %PGTOP%\lib\libpq.lib (
        CD %BUILD_DIR% &&
        7z x C:\Others\postgres-REL_%POSTGRES_VERSION%.zip &&
        CD postgres-REL_%POSTGRES_VERSION%\src\tools\msvc &&
        ECHO $config-^>{ldap} = 0; > config.pl &&
        ECHO $config-^>{openssl} = "%OPENSSLTOP:\=\\%"; >> config.pl &&
        ECHO.>> config.pl &&
        ECHO 1;>> config.pl &&
        perl -pi.bak -e "s/'libpq', 'dll'/'libpq', 'lib'/g" Mkvcbuild.pm &&
        build libpgport &&
        build libpgcommon &&
        build libpq &&
        ECHO "" > %PGBUILD%\src\backend\parser\gram.h &&
        perl -pi.bak -e "s/qw\(Install\)/qw\(Install CopyIncludeFiles\)/g" Install.pm &&
        perl -MInstall=CopyIncludeFiles -e"chdir('../../..'); CopyIncludeFiles('%PGTOP%')" &&
        COPY %PGBUILD%\Release\libpgport\libpgport.lib %PGTOP%\lib &&
        COPY %PGBUILD%\Release\libpgcommon\libpgcommon.lib %PGTOP%\lib &&
        COPY %PGBUILD%\Release\libpq\libpq.lib %PGTOP%\lib &&
        XCOPY /Y /S %PGBUILD%\src\include\port\win32\* %PGBUILD%\src\include &&
        XCOPY /Y /S %PGBUILD%\src\include\port\win32_msvc\* %PGBUILD%\src\include &&
        CD %PGBUILD%\src\bin\pg_config &&
        cl pg_config.c /MT /nologo /I%PGBUILD%\src\include /link /LIBPATH:%PGTOP%\lib libpgcommon.lib libpgport.lib advapi32.lib /NODEFAULTLIB:libcmt.lib /OUT:%PGTOP%\bin\pg_config.exe &&
        CD %BASE_DIR% &&
        RMDIR /S /Q %PGBUILD%
      )

build: off

#before_build:

build_script:
    # Add PostgreSQL binaries to the path
    - PATH=C:\Program Files\PostgreSQL\9.6\bin\;%PATH%
    - CD C:\Project
    #  --pg-config %PGTOP%\\bin\\pg_config.exe -l libpgcommon -l libpgport -L %OPENSSLTOP%\\lib -I %OPENSSLTOP%\\include"

#after_build:

before_test:
    # Create and setup PostgreSQL database for the tests
#    - createdb %PSYCOPG2_TESTDB%
#    - psql -d %PSYCOPG2_TESTDB% -c "CREATE EXTENSION HSTORE;"

#test_script:






#environment:
#  PGPASSWORD: Password12!
#  matrix:
#  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"
#
### uncomment the following lines to allow failures on nightly julia
### (tests will run but not make your overall status red)
##matrix:
##  allow_failures:
##  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x86/julia-latest-win32.exe"
##  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"
#
#services:
#  - postgresql
##  - mysql
#
#branches:
#  only:
#    - master
#    - /release-.*/
#
#notifications:
#  - provider: Email
#    on_build_success: false
#    on_build_failure: false
#    on_build_status_changed: false
#
#install:
#  - ps: "[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12"
## If there's a newer build queued for the same PR, cancel this one
#  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
#        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
#        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
#        throw "There are newer queued builds for this pull request, failing early." }
## Download most recent Julia Windows binary
#  - ps: (new-object net.webclient).DownloadFile(
#        $env:JULIA_URL,
#        "C:\projects\julia-binary.exe")
## Run installer silently, output to C:\projects\julia
#  - C:\projects\julia-binary.exe /S /D=C:\projects\julia
#
#build_script:
## Need to convert from shallow to complete for Pkg.clone to work
#  - IF EXIST .git\shallow (git fetch --unshallow)
#  - C:\projects\julia\bin\julia --color=yes -e "using InteractiveUtils; versioninfo()"
#  - C:\projects\julia\bin\julia --color=yes -e "using Pkg; f(x) = (Pkg.add(x); Pkg.checkout(x, \"master\")); [f(x) for x in reverse([\"LibPQ\", \"WinRPM\", \"Libz\", \"LibExpat\", \"DecFP\", \"CodecZlib\", \"LightXML\", \"TimeZones\", \"BinDeps\"])]"
#  - C:\projects\julia\bin\julia --color=yes -e "using Pkg; Pkg.clone(\"https://github.com/wookay/Octo.jl.git\"); Pkg.build(\"Octo\")"
#
#test_script:
#  - C:\projects\julia\bin\julia --color=yes -e "using Pkg; Pkg.test(\"Octo\")"
